using FluentValidation;
using FluentValidation.Results;
using GlucoPilot.Api.Endpoints.Pens.NewPen;
using GlucoPilot.Api.Models;
using GlucoPilot.AspNetCore.Exceptions;
using GlucoPilot.Data.Entities;
using GlucoPilot.Data.Repository;
using GlucoPilot.Identity.Authentication;
using Microsoft.AspNetCore.Http.HttpResults;
using Moq;
using NUnit.Framework;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace GlucoPilot.Api.Tests.Endpoints.Pens
{
    [TestFixture]
    public class NewPenTests
    {
        private readonly Mock<IValidator<NewPenRequest>> _validatorMock = new();
        private readonly Mock<ICurrentUser> _currentUserMock = new();
        private readonly Mock<IRepository<Pen>> _penRepositoryMock = new();
        private readonly Mock<IRepository<Insulin>> _insulinRepositoryMock = new();

        [SetUp]
        public void SetUp()
        {
            _validatorMock.Reset();
            _currentUserMock.Reset();
            _penRepositoryMock.Reset();
            _insulinRepositoryMock.Reset();
        }

        [Test]
        public async Task HandleAsync_Returns_Created_When_Request_Is_Valid()
        {
            var request = new NewPenRequest
            {
                InsulinId = Guid.NewGuid(),
                Model = PenModel.NovePen6,
                Colour = PenColour.Blue,
                Serial = "123ABC",
                StartTime = DateTimeOffset.UtcNow,
            };

            var validatorMock = new Mock<IValidator<NewPenRequest>>();
            validatorMock
                .Setup(v => v.ValidateAsync(request, default))
                .ReturnsAsync(new ValidationResult());

            var userId = Guid.NewGuid();
            _currentUserMock.Setup(u => u.GetUserId()).Returns(userId);

            _insulinRepositoryMock.Setup(r => r.FindOneAsync(
                    It.IsAny<System.Linq.Expressions.Expression<Func<Insulin, bool>>>(),
                    It.IsAny<FindOptions>(),
                    It.IsAny<CancellationToken>()))
                .ReturnsAsync(new Insulin { Id = request.InsulinId, UserId = userId, Name = "Test", Type = (Data.Enums.InsulinType)InsulinType.Bolus });

            _penRepositoryMock
                .Setup(r => r.AddAsync(It.IsAny<Pen>(), default))
                .Returns(Task.CompletedTask);

            var result = await Endpoint.HandleAsync(request, validatorMock.Object, _currentUserMock.Object, _penRepositoryMock.Object, _insulinRepositoryMock.Object, CancellationToken.None);

            Assert.That(result.Result, Is.TypeOf<Created<NewPenResponse>>());
            var created = result.Result as Created<NewPenResponse>;
            Assert.That(created, Is.Not.Null);
            Assert.That(created!.Value.Serial, Is.EqualTo(request.Serial));
            Assert.That(created.Value.Model, Is.EqualTo(request.Model));
            Assert.That(created.Value.Colour, Is.EqualTo(request.Colour));
            Assert.That(created.Value.InsulinId, Is.EqualTo(request.InsulinId));
            Assert.That(created.Value.StartTime, Is.EqualTo(request.StartTime));
        }

        [Test]
        public async Task HandleAsync_Returns_ValidationProblem_When_Request_Is_Invalid()
        {
            var request = new NewPenRequest();
            var failures = new[] { new ValidationFailure("Serial", "Serial is required") };
            var validationResult = new ValidationResult(failures);

            var validatorMock = new Mock<IValidator<NewPenRequest>>();
            validatorMock
                .Setup(v => v.ValidateAsync(request, default))
                .ReturnsAsync(validationResult);

            var currentUserMock = new Mock<ICurrentUser>();
            var penRepositoryMock = new Mock<IRepository<Pen>>();

            var result = await Endpoint.HandleAsync(request, validatorMock.Object, currentUserMock.Object, penRepositoryMock.Object, _insulinRepositoryMock.Object, CancellationToken.None);

            Assert.That(result.Result, Is.TypeOf<ValidationProblem>());
        }

        [Test]
        public void HandleAsync_Throws_NotFoundException_When_Insulin_Is_Not_Found()
        {
            var request = new NewPenRequest
            {
                InsulinId = Guid.NewGuid(),
                Model = PenModel.NovePen6,
                Colour = PenColour.Blue,
                Serial = "123ABC"
            };
            var userId = Guid.NewGuid();

            _validatorMock.Setup(v => v.ValidateAsync(request, It.IsAny<CancellationToken>()))
                .ReturnsAsync(new ValidationResult());
            _currentUserMock.Setup(u => u.GetUserId()).Returns(userId);
            _insulinRepositoryMock.Setup(r => r.FindOneAsync(
                    It.IsAny<System.Linq.Expressions.Expression<Func<Insulin, bool>>>(),
                    It.IsAny<FindOptions>(),
                    It.IsAny<CancellationToken>()))
                .ReturnsAsync((Insulin?)null);

            var exception = Assert.ThrowsAsync<NotFoundException>(async () =>
                await Endpoint.HandleAsync(
                    request,
                    _validatorMock.Object,
                    _currentUserMock.Object,
                    _penRepositoryMock.Object,
                    _insulinRepositoryMock.Object,
                    CancellationToken.None));

            Assert.That(exception, Is.Not.Null);
            Assert.That(exception.Message, Is.EqualTo("INSULIN_NOT_FOUND"));
        }
    }
}
