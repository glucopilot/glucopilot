using FluentValidation;
using FluentValidation.Results;
using GlucoPilot.Api.Endpoints.Pens.NewPen;
using GlucoPilot.Api.Models;
using GlucoPilot.Data.Entities;
using GlucoPilot.Data.Repository;
using GlucoPilot.Identity.Authentication;
using Microsoft.AspNetCore.Http.HttpResults;
using Moq;
using NUnit.Framework;
using System;
using System.Threading.Tasks;

namespace GlucoPilot.Api.Tests.Endpoints.Pens
{
    [TestFixture]
    public class NewPenTests
    {
        [Test]
        public async Task HandleAsync_Returns_Created_When_Request_Is_Valid()
        {
            var request = new NewPenRequest
            {
                InsulinId = Guid.NewGuid(),
                Model = PenModel.NovePen6,
                Colour = PenColour.Blue,
                Serial = "123ABC"
            };

            var validatorMock = new Mock<IValidator<NewPenRequest>>();
            validatorMock
                .Setup(v => v.ValidateAsync(request, default))
                .ReturnsAsync(new ValidationResult());

            var currentUserMock = new Mock<ICurrentUser>();
            var userId = Guid.NewGuid();
            currentUserMock.Setup(u => u.GetUserId()).Returns(userId);

            var penRepositoryMock = new Mock<IRepository<Pen>>();
            penRepositoryMock
                .Setup(r => r.AddAsync(It.IsAny<Pen>(), default))
                .Returns(Task.CompletedTask);

            var result = await Endpoint.HandleAsync(request, validatorMock.Object, currentUserMock.Object, penRepositoryMock.Object);

            Assert.That(result.Result, Is.TypeOf<Created<NewPenResponse>>());
            var created = result.Result as Created<NewPenResponse>;
            Assert.That(created, Is.Not.Null);
            Assert.That(created!.Value.Serial, Is.EqualTo(request.Serial));
            Assert.That(created.Value.Model, Is.EqualTo((Models.PenModel)request.Model));
            Assert.That(created.Value.Colour, Is.EqualTo((Models.PenColour)request.Colour));
            Assert.That(created.Value.InsulinId, Is.EqualTo(request.InsulinId));
        }

        [Test]
        public async Task HandleAsync_Returns_ValidationProblem_When_Request_Is_Invalid()
        {
            var request = new NewPenRequest();
            var failures = new[] { new ValidationFailure("Serial", "Serial is required") };
            var validationResult = new ValidationResult(failures);

            var validatorMock = new Mock<IValidator<NewPenRequest>>();
            validatorMock
                .Setup(v => v.ValidateAsync(request, default))
                .ReturnsAsync(validationResult);

            var currentUserMock = new Mock<ICurrentUser>();
            var penRepositoryMock = new Mock<IRepository<Pen>>();

            var result = await Endpoint.HandleAsync(request, validatorMock.Object, currentUserMock.Object, penRepositoryMock.Object);

            Assert.That(result.Result, Is.TypeOf<ValidationProblem>());
        }
    }
}
