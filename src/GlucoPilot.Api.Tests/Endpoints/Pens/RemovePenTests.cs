using GlucoPilot.Api.Endpoints.Pens.RemovePen;
using GlucoPilot.AspNetCore.Exceptions;
using GlucoPilot.Data.Entities;
using GlucoPilot.Data.Enums;
using GlucoPilot.Data.Repository;
using GlucoPilot.Identity.Authentication;
using Microsoft.AspNetCore.Http.HttpResults;
using Moq;
using NUnit.Framework;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace GlucoPilot.Api.Tests.Endpoints.Pens;

[TestFixture]
public class RemovePenTests
{
    private readonly Mock<ICurrentUser> _currentUserMock = new();
    private readonly Mock<IRepository<Pen>> _penRepositoryMock = new();
    private readonly Guid _penId = Guid.NewGuid();
    private readonly Guid _userId = Guid.NewGuid();
    private Pen _pen;

    [SetUp]
    public void SetUp()
    {
        _currentUserMock.Reset();
        _penRepositoryMock.Reset();

        _pen = new Pen
        {
            Id = _penId,
            UserId = _userId,
            InsulinId = Guid.NewGuid(),
            Created = DateTimeOffset.UtcNow,
            Model = PenModel.NovoPen6,
            Colour = PenColour.Blue,
            Serial = "123456",
            StartTime = DateTimeOffset.UtcNow
        };
    }

    [Test]
    public async Task HandleAsync_Returns_NoContent_When_Request_Is_Valid()
    {
        _currentUserMock.Setup(x => x.GetUserId()).Returns(_userId);
        _penRepositoryMock.Setup(x => x.FindOneAsync(
            It.IsAny<System.Linq.Expressions.Expression<Func<Pen, bool>>>(),
            It.IsAny<FindOptions>(),
            It.IsAny<CancellationToken>()))
            .ReturnsAsync(_pen);

        _penRepositoryMock.Setup(x => x.DeleteAsync(_pen, It.IsAny<CancellationToken>()))
            .Returns(Task.CompletedTask);

        var result = await Endpoint.HandleAsync(
            _penId,
            _currentUserMock.Object,
            _penRepositoryMock.Object,
            CancellationToken.None);

        Assert.That(result.Result, Is.TypeOf<NoContent>());
    }

    [Test]
    public void HandleAsync_Throws_NotFoundException_When_Pen_Not_Found()
    {
        _currentUserMock.Setup(x => x.GetUserId()).Returns(_userId);
        _penRepositoryMock.Setup(x => x.FindOneAsync(
            It.IsAny<System.Linq.Expressions.Expression<Func<Pen, bool>>>(),
            It.IsAny<FindOptions>(),
            It.IsAny<CancellationToken>()))
            .ReturnsAsync((Pen?)null);

        Assert.That(async () => await Endpoint.HandleAsync(_penId, _currentUserMock.Object, _penRepositoryMock.Object, CancellationToken.None),
            Throws.TypeOf<NotFoundException>().With.Message.EqualTo("PEN_NOT_FOUND"));
    }
}
